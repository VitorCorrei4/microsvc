public string GetToken()
    {
      var tokenHandler = new JwtSecurityTokenHandler();

      var key = Encoding.ASCII.GetBytes(_config[Constants.AppSettings.JWTSecret]);
      var tokenDescriptor = new SecurityTokenDescriptor
      {
        Expires = DateTime.UtcNow.AddYears(10),
        SigningCredentials = new SigningCredentials(new SymmetricSecurityKey(key), SecurityAlgorithms.HmacSha256Signature)
      };
      var token = tokenHandler.CreateToken(tokenDescriptor);
      return tokenHandler.WriteToken(token);
    }


using NUnit.Framework;
using System;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Text;

namespace UnitTests
{
    public class GetTokenTests
    {
        [Test]
        public void GetToken_ReturnsExpectedToken()
        {
            // Arrange
            var config = new Dictionary<string, string>
            {
                { Constants.AppSettings.JWTSecret, "secret" }
            };
            var sut = new TokenService(config);

            // Act
            var token = sut.GetToken();

            // Assert
            var handler = new JwtSecurityTokenHandler();
            var jwtToken = handler.ReadJwtToken(token);
            Assert.AreEqual(DateTime.UtcNow.AddYears(10), jwtToken.ValidTo);
            Assert.AreEqual("HS256", jwtToken.SignatureAlgorithm);
        }
    }
}
